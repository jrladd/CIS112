[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule & Readings",
    "section": "",
    "text": "There are no required texts for this course. Consider this resource (from the B.C. Open Textbook Collection) for supplemental reading: Database Design – 2nd Edition, by Adrienne Watt and Nelson Eng.\nSlideshows: Databasics, SQL\nResources: Login to Postgres, Design a Database"
  },
  {
    "objectID": "schedule.html#books-and-materials",
    "href": "schedule.html#books-and-materials",
    "title": "Schedule & Readings",
    "section": "",
    "text": "There are no required texts for this course. Consider this resource (from the B.C. Open Textbook Collection) for supplemental reading: Database Design – 2nd Edition, by Adrienne Watt and Nelson Eng.\nSlideshows: Databasics, SQL\nResources: Login to Postgres, Design a Database"
  },
  {
    "objectID": "schedule.html#class-schedule",
    "href": "schedule.html#class-schedule",
    "title": "Schedule & Readings",
    "section": "Class Schedule",
    "text": "Class Schedule\nYou should come to class each day having looked over the links listed for that day. Days marked with two asterisks (**) are required attendance days (see Course Policies for more info).\n\n\n\nDates\nMonday\nWednesday\nFriday\n\n\n\n\n28-30 Aug.\nNO CLASS on Monday\nIntroductions, Data & Information\nThe Relational Model (Just skim this article!)\n\n\n2-6 Sept.\nNO CLASS on Monday\nDependencies\nNormalization**\n\n\n9-13 Sept.\nNormalization Practice, Data Integrity\nSystem Development Lifecycle, Entity Relationship Diagrams**\nERDs cont.\n\n\n16-20 Sept.\nNormalization/ERD Practice\nExam Review Day!\nEXAM 1**\n\n\n23-27 Sept.\nPostgreSQL**\nStructured Query Language\nPROJECT 1 Due, Data Definition Language: INSERT/DELETE\n\n\n30 Sept.-4 Oct.\nDDL: Constraints and Foreign Keys\nData Manipulation Language: Queries**\nDDL: ALTER, UPDATE, RETURNING\n\n\n7-11 Oct.\nSQL Practice, Data Backups\nAggregate Functions, GROUP BY**\nSQL Practice, Prepare for Project 2\n\n\n14-18 Oct.\nJOIN Part 1**\nJOIN Part 2\nJOIN Practice\n\n\n23-25 Oct.\nNO CLASS (Fall Break)\nExam Review Day!\nEXAM 2**\n\n\n28 Oct.-1 Nov.\nACID, Transactions\nUser Interfaces, pgAdmin, User Personas\nProject 2 Due, Use Case Diagrams, Designing a Database\n\n\n4-8 Nov.\nSQL Functions, Creating and using PL/pgSQL**\nDeclaring and Initializing Variables**\nLearn new SQL commands on your own!\n\n\n11-15 Nov.\nTrigger Functions**\nFunctions Practice\nOne-on-one meetings\n\n\n18-22 Nov.\nUser Needs Activities\nDatabase Testing**\nPractice and Work on Final Project\n\n\n25 Nov.\nWork on Final Projects\nNO CLASS on Wednesday\nNO CLASS on Friday\n\n\n2-6 Dec.\nPeer review and Test Final Projects\nFinal Project Work\nOne-on-one meetings\n\n\n9 Dec.\nFinal Project Due! Final Exam Review Day!**\n\n\n\n\n16 Dec.\nFINAL EXAM: 9am-Noon."
  },
  {
    "objectID": "slides/sql.html#sql-works-in-postgres",
    "href": "slides/sql.html#sql-works-in-postgres",
    "title": "SQL",
    "section": "SQL works in Postgres",
    "text": "SQL works in Postgres\nbut it’s not the same as Postgres.\nPostgres is the program, SQL is the language."
  },
  {
    "objectID": "slides/sql.html#postgres-is-an-object-relational-database-management-system-dbms.-it",
    "href": "slides/sql.html#postgres-is-an-object-relational-database-management-system-dbms.-it",
    "title": "SQL",
    "section": "Postgres is an object-relational database management system (DBMS). It…",
    "text": "Postgres is an object-relational database management system (DBMS). It…\n\nis open-source, i.e. it’s free for all to use, redistribute, and modify\nsupports SQL (short for PostgreSQL)\nmaintains referential integrity according to Codd’s relational model\nallows developers to implement their own “atomic” data types"
  },
  {
    "objectID": "slides/sql.html#data-types-are-part-of-a-single-object",
    "href": "slides/sql.html#data-types-are-part-of-a-single-object",
    "title": "SQL",
    "section": "Data types are part of a single “object”",
    "text": "Data types are part of a single “object”\nUsing a relational approach, data “objects” can inherit values from other objects."
  },
  {
    "objectID": "slides/sql.html#consider-the-groceries-example",
    "href": "slides/sql.html#consider-the-groceries-example",
    "title": "SQL",
    "section": "Consider the groceries example…",
    "text": "Consider the groceries example…\n\n\n\ndate\nitem\nprice\nquantity\n\n\n\n\n8-11-2023\nApple\n$3.99\n2\n\n\n8-14-2023\nCokeZero\n$4.99\n3\n\n\n8-14-2023\nApple\n$3.99\n5"
  },
  {
    "objectID": "slides/sql.html#and-its-erd.",
    "href": "slides/sql.html#and-its-erd.",
    "title": "SQL",
    "section": "… and its ERD.",
    "text": "… and its ERD."
  },
  {
    "objectID": "slides/sql.html#you-can-create-individual-schemas.",
    "href": "slides/sql.html#you-can-create-individual-schemas.",
    "title": "SQL",
    "section": "You can CREATE individual schemas.",
    "text": "You can CREATE individual schemas.\nCREATE SCHEMA \"groceries\";\nAlways use quotes for attributes and names!"
  },
  {
    "objectID": "slides/sql.html#you-can-set-that-schema-as-your-search_path.",
    "href": "slides/sql.html#you-can-set-that-schema-as-your-search_path.",
    "title": "SQL",
    "section": "You can SET that schema as your search_path.",
    "text": "You can SET that schema as your search_path.\nYou should do this at the beginning of every SQL script in NotePad++. (Save files with .sql extension.)\nSET search_path TO \"groceries\";"
  },
  {
    "objectID": "slides/sql.html#you-can-create-an-entire-table-with-one-command.",
    "href": "slides/sql.html#you-can-create-an-entire-table-with-one-command.",
    "title": "SQL",
    "section": "You can CREATE an entire TABLE with one command.",
    "text": "You can CREATE an entire TABLE with one command.\nCREATE TABLE \"cost\" (\n    \"item\" TEXT PRIMARY KEY,\n    \"price\" FLOAT(3) NOT NULL\n);\nMake sure you include data types, constraints, and primary keys."
  },
  {
    "objectID": "slides/sql.html#the-postgres-documentation-is-a-huge-help",
    "href": "slides/sql.html#the-postgres-documentation-is-a-huge-help",
    "title": "SQL",
    "section": "The Postgres documentation is a huge help!",
    "text": "The Postgres documentation is a huge help!\n\nThe SQL Language\nTable Basics\nData Types"
  },
  {
    "objectID": "slides/sql.html#sometimes-your-table-will-have-a-composite-primary-key.",
    "href": "slides/sql.html#sometimes-your-table-will-have-a-composite-primary-key.",
    "title": "SQL",
    "section": "Sometimes your table will have a composite PRIMARY KEY.",
    "text": "Sometimes your table will have a composite PRIMARY KEY.\nCREATE TABLE \"purchase\" (\n    \"date\" DATE NOT NULL,\n    \"item\" TEXT NOT NULL,\n    \"quantity\" INTEGER NOT NULL,\n    PRIMARY KEY (\"date\", \"item\")\n);"
  },
  {
    "objectID": "slides/sql.html#delete-tables-with-drop-and-cascade.",
    "href": "slides/sql.html#delete-tables-with-drop-and-cascade.",
    "title": "SQL",
    "section": "Delete tables with DROP and CASCADE.",
    "text": "Delete tables with DROP and CASCADE.\nDROP TABLE removes the table and the CASCADE argument removes objects that depend on the table.\nDROP TABLE \"purchase\" CASCADE;"
  },
  {
    "objectID": "slides/sql.html#add-constraints-to-individual-columns-or-the-whole-table.",
    "href": "slides/sql.html#add-constraints-to-individual-columns-or-the-whole-table.",
    "title": "SQL",
    "section": "Add CONSTRAINTs to individual columns or the whole table.",
    "text": "Add CONSTRAINTs to individual columns or the whole table.\nUse the Postgres Documentation for a complete guide.\n\nYou’ve already done this with PRIMARY KEY and NOT NULL!"
  },
  {
    "objectID": "slides/sql.html#you-can-make-one-or-many-columns-unique.",
    "href": "slides/sql.html#you-can-make-one-or-many-columns-unique.",
    "title": "SQL",
    "section": "You can make one or many columns UNIQUE.",
    "text": "You can make one or many columns UNIQUE.\nCREATE TABLE \"cost\" (\n    \"item\" TEXT UNIQUE,\n    \"price\" FLOAT(3)\n);\nor\nCREATE TABLE \"cost\" (\n    \"item\" TEXT,\n    \"price\" FLOAT(3),\n    UNIQUE (\"item\")\n);"
  },
  {
    "objectID": "slides/sql.html#add-foreign-keys-with-the-references-constraint.",
    "href": "slides/sql.html#add-foreign-keys-with-the-references-constraint.",
    "title": "SQL",
    "section": "Add foreign keys with the REFERENCES constraint.",
    "text": "Add foreign keys with the REFERENCES constraint.\n\nAvoid errors with appropriate flow: i.e. you must reference a table that already exists!\nIf you don’t specify the columns, SQL will automatically use the reference table’s primary key."
  },
  {
    "objectID": "slides/sql.html#examples-of-the-references-constraint",
    "href": "slides/sql.html#examples-of-the-references-constraint",
    "title": "SQL",
    "section": "Examples of the REFERENCES constraint",
    "text": "Examples of the REFERENCES constraint\nCREATE TABLE \"purchase\" ( --Option 1: Column Constraint\n    \"date\" DATE,\n    \"item\" TEXT REFERENCES \"cost\" (\"item\"),\n    \"quantity\" INTEGER NOT NULL,\n    PRIMARY KEY (\"date\", \"item\")\n);\nCREATE TABLE \"purchase\" ( --Option 2: Table Constraint\n    \"date\" DATE,\n    \"item\" TEXT,\n    \"quantity\" INTEGER NOT NULL,\n    PRIMARY KEY (\"date\", \"item\"),\n    FOREIGN KEY (\"item\") REFERENCES \"cost\" (\"item\")\n);"
  },
  {
    "objectID": "slides/sql.html#create-custom-constraints-with-check.",
    "href": "slides/sql.html#create-custom-constraints-with-check.",
    "title": "SQL",
    "section": "Create custom constraints with CHECK.",
    "text": "Create custom constraints with CHECK.\nCREATE TABLE \"cost\" (\n    \"item\" TEXT PRIMARY KEY,\n    \"price\" FLOAT(3) CHECK (\"price\" &gt; 0)\n);"
  },
  {
    "objectID": "slides/sql.html#you-try-it",
    "href": "slides/sql.html#you-try-it",
    "title": "SQL",
    "section": "You try it!",
    "text": "You try it!\n\nCompletely delete the groceries schema (but save your .sql files).\nRewrite your DDL script with all original constraints.\nAdd a constraint for the correct foreign key in the “purchase” table.\nAdd a constraint to prevent “price” from being negative.\nRe-run your INSERT commands from last time to repopulate the database.\nLook at the schemas and data (with SELECT) to see if it worked."
  },
  {
    "objectID": "slides/sql.html#change-tables-with-alter.",
    "href": "slides/sql.html#change-tables-with-alter.",
    "title": "SQL",
    "section": "Change tables with ALTER.",
    "text": "Change tables with ALTER.\nA few examples:\n-- Add a column\nALTER TABLE \"cost\" ADD COLUMN \"weight\" FLOAT(4);\n\n-- Drop a column\nALTER TABLE \"purchase\" DROP COLUMN \"quantity\";\n\n-- Rename a column\nALTER TABLE \"purchase\" RENAME COLUMN \"date\" TO \"day\";\n\n-- Add (or remove) a constraint\nALTER TABLE \"purchase\" ADD FOREIGN KEY (\"item\") REFERENCES \"cost\";\nMore in the Postgres documentation."
  },
  {
    "objectID": "slides/sql.html#insert-data-into-your-tables.",
    "href": "slides/sql.html#insert-data-into-your-tables.",
    "title": "SQL",
    "section": "INSERT data into your tables.",
    "text": "INSERT data into your tables.\nINSERT INTO \"cost\" VALUES ('Apple', 3.99);"
  },
  {
    "objectID": "slides/sql.html#or-insert-into-specific-columns.",
    "href": "slides/sql.html#or-insert-into-specific-columns.",
    "title": "SQL",
    "section": "Or INSERT into specific columns.",
    "text": "Or INSERT into specific columns.\nINSERT INTO \"cost\" (item) VALUES ('CokeZero');\nThis will only work if the other columns can be NULL!"
  },
  {
    "objectID": "slides/sql.html#you-try-it-1",
    "href": "slides/sql.html#you-try-it-1",
    "title": "SQL",
    "section": "You try it!",
    "text": "You try it!\nEnter the command for inserting data into the purchase table.\nHINT: You may need to look at the Postgres documentation for data types."
  },
  {
    "objectID": "slides/sql.html#check-if-your-data-is-there-with-select.",
    "href": "slides/sql.html#check-if-your-data-is-there-with-select.",
    "title": "SQL",
    "section": "Check if your data is there with SELECT.",
    "text": "Check if your data is there with SELECT.\nSELECT * from \"cost\";\nSELECT * from \"purchase\";\nWe’ll learn a lot more about SELECT later on…"
  },
  {
    "objectID": "slides/sql.html#delete-records-from-your-table.",
    "href": "slides/sql.html#delete-records-from-your-table.",
    "title": "SQL",
    "section": "DELETE records from your table.",
    "text": "DELETE records from your table.\nDELETE FROM \"purchase\" WHERE \"item\"='Apple';\n\nDelete takes a condition with WHERE (not IF)\nType of quotation marks is important! Tables and column names in double; values in single.\nDELETE FROM \"purchase\"; will delete ALL the data without warning."
  },
  {
    "objectID": "slides/sql.html#you-try-it-2",
    "href": "slides/sql.html#you-try-it-2",
    "title": "SQL",
    "section": "You try it!",
    "text": "You try it!\nDelete CokeZero from the cost table."
  },
  {
    "objectID": "slides/sql.html#copy-an-entire-table-from-a-csv-file.",
    "href": "slides/sql.html#copy-an-entire-table-from-a-csv-file.",
    "title": "SQL",
    "section": "Copy an entire table from a CSV file.",
    "text": "Copy an entire table from a CSV file.\n\\copy \"Musical Instrument\" FROM 'musical_instruments.csv' WITH CSV HEADER\n\nThe column names MUST be in the same order.\nThe CSV must be in the same directory as your psql login."
  },
  {
    "objectID": "slides/sql.html#change-records-with-update.",
    "href": "slides/sql.html#change-records-with-update.",
    "title": "SQL",
    "section": "Change records with UPDATE.",
    "text": "Change records with UPDATE.\n-- Change one or many rows\nUPDATE \"purchase\" SET \"quantity\" = 6 WHERE \"quantity\" = 5;\n\n-- Change all rows based on original value\nUPDATE \"cost\" SET \"price\" = \"price\" * 100;\n\n-- Change more than one column\nUPDATE \"cost\" SET \"item\" = 'Banana', \"price\" = 599 WHERE \"item\" = 'Apple';\nAll this and more in the Postgres documentation."
  },
  {
    "objectID": "slides/sql.html#get-data-while-modifying-rows-with-returning.",
    "href": "slides/sql.html#get-data-while-modifying-rows-with-returning.",
    "title": "SQL",
    "section": "Get data while modifying rows with RETURNING.",
    "text": "Get data while modifying rows with RETURNING.\nINSERT INTO \"cost\" VALUES ('CokeZero', 4.99) RETURNING \"item\";\n\nUPDATE \"cost\" SET \"price\" = \"price\" * 100 RETURNING \"price\";\nAs always, more in the Postgres documentation."
  },
  {
    "objectID": "slides/sql.html#erds-are-essential-for-queries.",
    "href": "slides/sql.html#erds-are-essential-for-queries.",
    "title": "SQL",
    "section": "ERDs are essential for queries.",
    "text": "ERDs are essential for queries.\nYou need them for column names, but also for capitalization, combining different tables, etc."
  },
  {
    "objectID": "slides/sql.html#select-is-the-command-for-all-queries.",
    "href": "slides/sql.html#select-is-the-command-for-all-queries.",
    "title": "SQL",
    "section": "SELECT is the command for all queries.",
    "text": "SELECT is the command for all queries.\nIn its simplest form, you can use it to do simple arithmetic or to get all rows from a table.\nSELECT 5 * 9;\nSELECT * FROM \"purchase\";\nSELECT \"item\", \"quantity\" FROM \"purchase\";"
  },
  {
    "objectID": "slides/sql.html#perform-arithmetic-on-columns-and-give-them-new-names-with-as.",
    "href": "slides/sql.html#perform-arithmetic-on-columns-and-give-them-new-names-with-as.",
    "title": "SQL",
    "section": "Perform arithmetic on columns and give them new names with AS.",
    "text": "Perform arithmetic on columns and give them new names with AS.\nSELECT \"item\", \"quantity\", \"quantity\" + 5 AS \"updated_quantity\" FROM \"purchase\";"
  },
  {
    "objectID": "slides/sql.html#if-the-column-isnt-numeric-i.e.-money-or-a-date-you-may-have-to-type-cast-to-avoid-errors",
    "href": "slides/sql.html#if-the-column-isnt-numeric-i.e.-money-or-a-date-you-may-have-to-type-cast-to-avoid-errors",
    "title": "SQL",
    "section": "If the column isn’t numeric (i.e. money or a date), you may have to type cast to avoid errors:",
    "text": "If the column isn’t numeric (i.e. money or a date), you may have to type cast to avoid errors:\nSELECT \"item\", \"quantity\", \"quantity\"::NUMERIC + 5 AS \"updated_quantity\" FROM \"purchase\";\nOther forms of type casting:\n\"quantity\"::NUMERIC::INTEGER\nCAST(\"quantity\" AS NUMERIC)\nCAST(CAST(\"quantity\" AS NUMERIC) AS INTEGER))"
  },
  {
    "objectID": "slides/sql.html#sort-results-with-order-by.",
    "href": "slides/sql.html#sort-results-with-order-by.",
    "title": "SQL",
    "section": "Sort results with ORDER BY.",
    "text": "Sort results with ORDER BY.\nSELECT \"item\", \"quantity\" FROM \"purchase\" ORDER BY \"item\";\nORDER BY can also be used with arithmetic expressions and newly created columns!"
  },
  {
    "objectID": "slides/sql.html#get-specific-rows-with-where-conditions.",
    "href": "slides/sql.html#get-specific-rows-with-where-conditions.",
    "title": "SQL",
    "section": "Get specific rows with WHERE conditions.",
    "text": "Get specific rows with WHERE conditions.\nSELECT \"item\", \"date\" FROM \"purchase\" WHERE \"item\" = 'Apple';"
  },
  {
    "objectID": "slides/sql.html#get-a-set-number-of-rows-with-limit.",
    "href": "slides/sql.html#get-a-set-number-of-rows-with-limit.",
    "title": "SQL",
    "section": "Get a set number of rows with LIMIT.",
    "text": "Get a set number of rows with LIMIT.\nSELECT * FROM \"purchase\" LIMIT 2;\nUse OFFSET to start somewhere other than the beginning (which is row 0):\nSELECT * FROM \"purchase\" LIMIT 2 OFFSET 1;\nIt’s recommended to use LIMIT with ORDER BY always!"
  },
  {
    "objectID": "slides/sql.html#remember-you-can-always-refer-back-to-the-documentation",
    "href": "slides/sql.html#remember-you-can-always-refer-back-to-the-documentation",
    "title": "SQL",
    "section": "Remember, you can always refer back to the documentation:",
    "text": "Remember, you can always refer back to the documentation:\nSELECT queries: https://www.postgresql.org/docs/14/queries-overview.html\nORDER BY and AS: https://www.postgresql.org/docs/14/queries-order.html\nLIMIT and OFFSET: https://www.postgresql.org/docs/14/queries-limit.html"
  },
  {
    "objectID": "slides/sql.html#you-try-it-3",
    "href": "slides/sql.html#you-try-it-3",
    "title": "SQL",
    "section": "You Try It!",
    "text": "You Try It!\n\nFinish adding tables and data to the Music schema.\nWrite queries to answer the following questions:\n\n\nWhat pitches were used in files where a clarinet was played?\nWhat would each instrument cost if I got a 10% discount?\nWhich tone colors are visible?\nWhat are the last three note pitches?\n\n\nSave all of these queries in a separate .sql file, with comments that explain what each one does.\nWhen you finish, return to the other practice data sets."
  },
  {
    "objectID": "slides/sql.html#aggregate-functions-let-you-calculate-based-on-columns.",
    "href": "slides/sql.html#aggregate-functions-let-you-calculate-based-on-columns.",
    "title": "SQL",
    "section": "Aggregate functions let you calculate based on columns.",
    "text": "Aggregate functions let you calculate based on columns.\nSELECT COUNT(\"item\") FROM \"purchase\";\n\nSELECT AVG(\"price\"::NUMERIC) FROM \"cost\";\nRemember to add type casts as needed!"
  },
  {
    "objectID": "slides/sql.html#key-aggregate-functions",
    "href": "slides/sql.html#key-aggregate-functions",
    "title": "SQL",
    "section": "Key aggregate functions:",
    "text": "Key aggregate functions:\n\nCOUNT()\nAVG()\nSUM()\nMIN()\nMAX()\n\nYou can use the full list from the Postgres documentation!"
  },
  {
    "objectID": "slides/sql.html#use-distinct-to-work-with-unique-values.",
    "href": "slides/sql.html#use-distinct-to-work-with-unique-values.",
    "title": "SQL",
    "section": "Use DISTINCT to work with unique values.",
    "text": "Use DISTINCT to work with unique values.\nSELECT COUNT(DISTINCT \"item\") FROM \"purchase\";"
  },
  {
    "objectID": "slides/sql.html#group-rows-to-summarize-your-table.",
    "href": "slides/sql.html#group-rows-to-summarize-your-table.",
    "title": "SQL",
    "section": "GROUP rows to summarize your table.",
    "text": "GROUP rows to summarize your table.\nSELECT \"item\", AVG(\"quantity\") FROM \"purchase\" GROUP BY \"item\";\nUse HAVING to limit groups.\nhttps://www.postgresql.org/docs/14/queries-table-expressions.html#QUERIES-GROUP"
  },
  {
    "objectID": "slides/sql.html#subqueries-define-connections-between-tables.",
    "href": "slides/sql.html#subqueries-define-connections-between-tables.",
    "title": "SQL",
    "section": "Subqueries define connections between tables.",
    "text": "Subqueries define connections between tables.\nThere are several expressions for subqueries in the documentation.\nUse foreign keys to guide you! This is ideal for optional relations.\n-- This should all be on one line in your .sql file\nSELECT AVG(\"price\"::NUMERIC) FROM \"cost\" WHERE \"item\" \n    IN (SELECT \"item\" FROM \"purchase\" WHERE \"quantity\" &lt; 3);"
  },
  {
    "objectID": "slides/sql.html#you-try-it-4",
    "href": "slides/sql.html#you-try-it-4",
    "title": "SQL",
    "section": "You try it!",
    "text": "You try it!\nWrite queries to answer the following for the “music” schema:\n\nWhat is the average cost of all instruments?\nWhat is the average cost of each instrument (since some have multiple manufacturers)?\nWhat is the maximum frequency of pitch colors with a WvMin (for color) of less than 500?\nHow many individual instrument families are there?"
  },
  {
    "objectID": "slides/sql.html#a-join-combines-results-from-2-or-more-tables.",
    "href": "slides/sql.html#a-join-combines-results-from-2-or-more-tables.",
    "title": "SQL",
    "section": "A JOIN combines results from 2 or more tables.",
    "text": "A JOIN combines results from 2 or more tables.\nThe basics of JOIN syntax:\nhttps://www.postgresql.org/docs/14/tutorial-join.html\nDetails on different JOIN statements:\nhttps://www.postgresql.org/docs/14/queries-table-expressions.html#QUERIES-FROM"
  },
  {
    "objectID": "slides/sql.html#inner-joins-only-return-rows-that-exist-in-both-tables.",
    "href": "slides/sql.html#inner-joins-only-return-rows-that-exist-in-both-tables.",
    "title": "SQL",
    "section": "INNER JOINs only return rows that exist in both tables.",
    "text": "INNER JOINs only return rows that exist in both tables.\nConsider the inner part of a venn diagram. Only the overlapping part is returned.\nLet’s try to make venn diagrams for LEFT, RIGHT, and FULL OUTER JOINs."
  },
  {
    "objectID": "slides/sql.html#inner-join-is-the-default.",
    "href": "slides/sql.html#inner-join-is-the-default.",
    "title": "SQL",
    "section": "INNER JOIN is the default.",
    "text": "INNER JOIN is the default.\nSELECT * FROM \"cost\" JOIN \"purchase\" ON \"cost\".\"item\" = \"purchase\".\"item\";\nMatch foreign keys with ON or with USING.\n--Using needs parentheses and eliminates duplicates\nSELECT * FROM \"cost\" JOIN \"purchase\" USING (\"item\");"
  },
  {
    "objectID": "slides/sql.html#use-aliases-to-simplify-your-statements.",
    "href": "slides/sql.html#use-aliases-to-simplify-your-statements.",
    "title": "SQL",
    "section": "Use Aliases to simplify your statements.",
    "text": "Use Aliases to simplify your statements.\nSELECT c.\"item\", c.\"price\", p.\"date\"\n    FROM \"cost\" AS c JOIN \"purchase\" AS p ON c.\"item\" = p.\"item\";\nYou can do this without AS, too.\nSELECT c.\"item\", c.\"price\", p.\"date\"\n    FROM \"cost\" c JOIN \"purchase\" p ON c.\"item\" = p.\"item\";"
  },
  {
    "objectID": "slides/sql.html#you-try-it-5",
    "href": "slides/sql.html#you-try-it-5",
    "title": "SQL",
    "section": "You Try It!",
    "text": "You Try It!\n\nFind the dynamic, MIDI, and frequency for every pitch.\nGet the average cost for each family of instrument.\nGet WvMin and WvMax values for both pitch and color."
  },
  {
    "objectID": "slides/sql.html#outer-join-resources",
    "href": "slides/sql.html#outer-join-resources",
    "title": "SQL",
    "section": "OUTER JOIN resources",
    "text": "OUTER JOIN resources\n\nPostgres documentation: https://www.postgresql.org/docs/14/queries-table-expressions.html#QUERIES-FROM\nJOIN tutorial: https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-joins/"
  },
  {
    "objectID": "slides/sql.html#you-try-it-practicing-joins",
    "href": "slides/sql.html#you-try-it-practicing-joins",
    "title": "SQL",
    "section": "You Try It: Practicing JOINS",
    "text": "You Try It: Practicing JOINS\n\nMake a list of all instruments, their families, and their cost (even if there’s no cost listed).\nGet the average frequency played by each instrument.\nCreate a table showing all colors with their pitch, their visibility, and whether they were played on piano. The table should show pitches that don’t have colors and vice versa.\nShow the files and pitches in which pitches were played with a frequency greater than 210, and show any of those pitches that were not played in files."
  },
  {
    "objectID": "slides/sql.html#practicing-joins-cont.",
    "href": "slides/sql.html#practicing-joins-cont.",
    "title": "SQL",
    "section": "Practicing JOINS (cont.)",
    "text": "Practicing JOINS (cont.)\n\nGet the names, ages, games, and star ratings for every spy who playtested a game and every spy who didn’t playtest.\nList the platform for every game played by Jason Bourne.\nWhich spies played their games for more than one hour?\nCreate a table of all games, the year they came out, all spies, and their ages, whether or not a spy playtested a game or a game was playtested at all."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Database Concepts",
    "section": "",
    "text": "Meeting Time: MWF 1:00-2:10pm\nDr. Ladd’s Student Drop-In Hours: M 11:30am–12:30pm, Tu & Th 1:30–3:30pm in TECH 201 or email for appointment, jladd@washjeff.edu\nPAL Tutoring Hours: 7-10pm Sunday–Thursday in the CIS Lounge (TECH 217)\nTutor bios and additional info"
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Database Concepts",
    "section": "Course Description",
    "text": "Course Description\nDatabases power so much of our daily lives: your school records are kept in a database, the social media posts you create are recorded and tracked in databases, and your bank keeps your balance and transactions in a database. They are an essential tool for organizing and sharing information across large systems.\nThis course will provide an overview of the role of databases within a variety of academic, business, and governmental organizations, and an introduction to database design and management. You will create databases related to your major fields or secondary course of study using both small business and enterprise-class database management systems."
  },
  {
    "objectID": "index.html#learning-goals",
    "href": "index.html#learning-goals",
    "title": "Database Concepts",
    "section": "Learning Goals",
    "text": "Learning Goals\nAt the end of this course, you will be able to:\n\nDescribe and identify the functions of a Database Management System in both design and management\nUnderstand the fundamental concepts ubiquitous to Database Management Systems\nCreate databases using common languages and management systems such as SQL and Postgres\nDesign and develop complex database systems using common data forms and normalization techniques"
  },
  {
    "objectID": "login.html",
    "href": "login.html",
    "title": "Login to Postgres",
    "section": "",
    "text": "Make sure you are on the WashJeff campus Wifi network. Postgres will only work when connected to this network!\nCheck your email for your username and password.\nOpen the Command Prompt (either through Notepad++ or the Start Menu).\nEnter the following command: psql.exe -h wjcissvr.washjeff.edu -U yourusername -d yourdatabase\nWhen prompted, enter your full password (case sensitive) and press Enter. (It won’t look like you’re typing anything, but this is normal!)\nLook for the prompt username=&gt;, and you’re ready to go!\nPostgres is installed in our classroom and all of the lab computers. If you want to use it on your own machine, you’ll need to install Postgres there yourself."
  },
  {
    "objectID": "login.html#common-psql-commands",
    "href": "login.html#common-psql-commands",
    "title": "Login to Postgres",
    "section": "Common psql Commands",
    "text": "Common psql Commands\n\n\\c Connect to a database\n\\i Execute a script\n\\d List all tables and views of the available schema\nhelp List all psql help commands\n\\h List all SQL commands\n\\? List all psql commands\n\\q Close the database connection and exit the program\n\\dn List all viewable schemas\n\\dt List all of the tables in the active schema\n\\l List all viewable databases"
  },
  {
    "objectID": "login.html#if-this-isnt-working",
    "href": "login.html#if-this-isnt-working",
    "title": "Login to Postgres",
    "section": "If this isn’t working…",
    "text": "If this isn’t working…\nBefore you login, make sure the PATH is set correctly in your Environmental Variables. If you’re having trouble getting psql to work, this is a likely cause. You’ll need to add the following to your PATH:\nC:\\Program Files\\pgAdmin 4\\runtime\\"
  },
  {
    "objectID": "assignments/project2.html",
    "href": "assignments/project2.html",
    "title": "Project 2: Database Implementation",
    "section": "",
    "text": "Complete by: Friday 1 Nov., at class time.\nSee the bottom of the file for additional checkpoints, all due at class time.\nThis prompt was written by Dr. Rapp and lightly adapted by me for our class.\nIn Project I, you organized a dataset and produced an ERD for that organization. In this project, you will transform your organization and roadmap into a fully functional database using PostgreSQL and Notepad++ (or a similar text-editor).\nTo ensure consistency across your databases, you will first obtain a copy of the ERD Dr. Ladd built from this dataset. The version you obtain will not be the only correct way to organize this dataset, but it will be the roadmap of the data I will provide for large-scale querying during of this project. Your first task, then, will be to compare your Project I ERD to the class-uniform Project II ERD. You will write a brief essay (300 - 750 words) comparing your ERD to mine, and either arguing to defend your organization or making observations of where you could have improved your organization.\nYou will then build a complete schema, with full referential integrity, based on the class-uniform Project II ERD. Your code should follow the best practices of the class and follow the ERD exactly. You will be provided with a larger dataset to store in your functional database, and you will then be tasked with building 20 queries. Dr. Ladd will post the output of such queries; you will be expected to produce the exact output from your databases. You are expected to work on this project out of class until the due date of Friday, Nov. 1. Recall from the syllabus that you are not permitted to collaborate with your classmates for this project; you may seek guidance from me or the PAL tutors. For the purposes of this project, consider me to be your client and the PAL tutors to be your development team. You are developing this database for me, and to ensure timely completion I will require pieces of the project for submission before the final due date.\nCheck-in dates:\n\nFriday, October 11: Essay check-in, submitted complete draft as a PDF through Sakai; Required queries / output posted.\nFriday, October 18: DDL check-in, submitted as a .sql file through Sakai.\nFriday, October 25: DML check-in, submitted as a .sql file through Sakai.\nFriday, November 1: Final submission: all project files are submitted through Sakai for grading\n\nThe following criteria will be followed to evaluate this assignment on a 100-pt scale:\n\n25 pts: Data Definition follows the ERD to produce a database with referential integrity.\n50 pts: Data Manipulation effectively inserts/updates the data and builds the requested queries.\n25 pts: Essay detailing the differences between your Project I work and the class provided ERD."
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "On this page you’ll find prompts for the different assignments in our course (posted closer to their due dates), as well as a breakdown of assignments. Additional information about assignments and grading can be found on the Course Policies page."
  },
  {
    "objectID": "assignments.html#assignment-breakdown",
    "href": "assignments.html#assignment-breakdown",
    "title": "Assignments",
    "section": "Assignment Breakdown",
    "text": "Assignment Breakdown\n\n\n\nAssignment\nPercentage\n\n\n\n\nQuizzes\n15%\n\n\nExams 1 & 2\n15%\n\n\nProject 1\n15%\n\n\nProject 2\n15%\n\n\nFinal Project\n20%\n\n\nFinal Exam\n20%"
  },
  {
    "objectID": "assignments/project3.html",
    "href": "assignments/project3.html",
    "title": "Final Project: Build a Database",
    "section": "",
    "text": "Complete by: Monday 9 Dec., at class time.\nSee the bottom of the file for additional checkpoints, all due at class time.\nThis prompt was written by Dr. Rapp and lightly adapted by me for our class.\nIn this project, you will plan, design, and develop a database on a topic of your choice as if you were going to release it online for public use. Sample topics could include…\nYou may not build a database from a dataset of sports statistics or about professional athletes. You may not collect data about people without working with W&J’s Institutional Review Board. If you would like to collect data for your final project, please meet with me ASAP!\nYour database must feature no less than eight tables, store a minimum of 25 attributes and 80 rows across all tables1, and store ten reasonably distinct queries representing documented use-cases. Those queries must make use of the following operations:\nYou will also add a minimum of two trigger functions to automatically perform certain transactions within your system. You must use a minimum of three SQL keywords that were not covered in class.\nYou must provide all relevant documentation as a single PDF which you will name “README.pdf”, to make obvious to the users of your system that it is intended for them to read! The README should be a cohesive document with good flow and must feature your database’s purpose and classification, three user personas2, a use-case diagram illustrating the actions that intended actors can perform, the complete data dictionary and entity relationship diagram documenting your database design, and instructions written for the person developing your interface detailing the function calls for the particular use-cases you’ve designed your system to support3.\nYou are expected to work on this project out of class until the due date of 1pm on Monday, December 9. You are welcome to work with your peers, with the PAL tutors, and with me on this project, but if you choose the same database as a friend you may not share queries, trigger functions, or new keywords unless given written permission from me. To ensure timely completion and prevent end-of-semester stress due to procrastination, I will require pieces of the project submission before the final due date. Here is the timeline for the final project:\nThe following criteria will be followed to evaluate this assignment on a 100-pt scale:"
  },
  {
    "objectID": "assignments/project3.html#footnotes",
    "href": "assignments/project3.html#footnotes",
    "title": "Final Project: Build a Database",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIf it is completely impossible to hit the requirements as indicated given the purpose of a database of your creation, you may ask for an exception to this rule. Any project seeking this exception must have been granted accommodation (through an email confirmation) prior to the Thanksgiving break.↩︎\nSee footnote 1!↩︎\nAs an example, this might include connecting a particular use-case to a particular function. As an example, one might write the following as an instruction: “Users are able to search for the phone number of a particular contact (e.g., John Marine). The function query_contact_phone takes two text arguments, representing the first and last name for the contact of interest. An example function call in SQL would look like: SELECT ∗ FROM query_contact_phone(’John’,’Marine’);”↩︎"
  },
  {
    "objectID": "assignments/project1.html",
    "href": "assignments/project1.html",
    "title": "Project 1: Database Design",
    "section": "",
    "text": "Complete by: Friday 27 Sept., at class time.\nSee the bottom of the file for additional checkpoints, all due at class time.\nThis prompt was written by Dr. Rapp and lightly adapted by me for our class.\nIn this project, you will examine a real-world dataset and design a database to support it following the best-practices taught throughout the course. The dataset can be downloaded from Sakai, either in the “Project 1” folder under Resources, or under the Project 1 Assignment.\nYour first task is to normalize the dataset; you’ll create an Excel file, with one Sheet per table, that indicates all primary keys in bold and color coordinates the foreign key connections between the tables. You’ll then create a single README, or a PDF document to accompany a dataset which contains relevant details that all users are expected to read as a starting point. The README must contain a dependency diagram with all full functional dependencies indicated, a complete physical ERD documenting the normalized schema, a Data Dictionary which associates the column names with their relevant descriptions, and a reflective essay (1-2 pages) detailing your organizational choices and how they serve the way people will use this dataset. Your reflection will use the technical terms we define in class and should discuss the contributions others made to your choices. The README will also contain all citations and references.\nYou are expected to work on this project out of class until the due date of Friday, September 27. Recall from the syllabus that you are permitted to ask your classmates for help with this project provided you cite their contributions to your work; you are also encouraged to seek guidance from me or from the PAL tutors.\nYou may consider me to be your client for this project and the associated Project II. In an industry setting, you’ll be expected to communicate with your client during the development of your product; to help you practice this, along with the specific database design skills you’ll demonstrate, you have a few checkpoints to complete prior to the final due date. These are intended to help you make steady progress on the project, so that by the final deadline all your work will be polished and complete. All checkpoints can be submitted to the same Sakai Assignment.\nThis breakdown identifies all the important dates:\n\nFriday, September 13: You will upload an in-progress Dependency Diagram as a photo through Sakai.\nMonday, September 16: You will upload an in-progress Excel file to Sakai to confirm navigational accessibility.\nMonday, September 23: You will upload an in-progress README as a PDF to Sakai to confirm formatting.\nFriday, September 27: A completed Excel file and README are submitted through Sakai.\n\nThe following categories will be my criteria to evaluate this assignment on a 100-pt scale:\n\n35 pts: All relations are well-formed; data has been normalized following your dependency diagram.\n35 pts: The schema you developed and its contents are well documented using a physical ERD.\n30 pts: Data Dictionary and Reflection support the decisions documented in the Excel file and ERD."
  },
  {
    "objectID": "design.html",
    "href": "design.html",
    "title": "Design a Database",
    "section": "",
    "text": "In this activity, which you will work on during class time today and on Friday, you’ll design the database for one of the major companies which use PostgreSQL today!\nYour group will be assigned one of the following companies: Netflix, IMDb, Spotify, Twitch, Instagram, Reddit\nWith your group, develop 3 user personas for the company you have chosen; think about the following questions when developing your personas / researching the company:\n\nWhat does the end-user need from the database that this company uses to provide its service? How will they interact with the company’s database?\nWhat privileges will the end-user need to access the data? Does this vary between end-users?\nWhat are the most common operations that the users will perform?\nWill your user have any knowledge of SQL?\nWill users be inserting / updating data, or just querying it? Does this vary between users?\n\nOnce you have your user personas developed, start to write some ideas about the design of the database. Include the following:\n\nWhat is the classification of the database you are developing? (E.g., is it Single or multi-user? General-purpose or discipline-specific? So on and so forth…)\nWhat are the most common operations / transactions that you’d want to build into the system?\nWhat are the most common “roles” for users of the system?\nWhat types of data will be tracked by the system? Will users be able to affect it?\nAre there actions taken by the system that are part of a larger transaction? (E.g., if something can be purchased, what sequence of SQL statements would be executed?)\n\nIf you finish developing personas and discussing the database, begin to sketch a potential ERD for the database you’ve just discussed."
  },
  {
    "objectID": "policies.html",
    "href": "policies.html",
    "title": "Course Policies",
    "section": "",
    "text": "We will cover a lot of material during the semester, and you will have many opportunities to discuss complex ideas with your peers. Some of you may be entering the classroom with more advanced prior knowledge of databases and related topics, while others may be encountering these concepts for the first time. Group learning and discussion are key aspects of this course. This means that we all need to do our part to be prepared for each class, and to foster a positive and inquisitive learning environment.\nIn between classes you should:\n\nReview your notes from previous classes\nRead the assigned readings for that day\nRefer to this site for updates to the schedule\nDO NOT wait until the last minute to begin your assignments\nEMAIL your instructor with any questions. Ask lots of questions!\n\nEach class must create its own learning community as the result of shared efforts on the part of all members. It is your responsibility as a member of this learning community to help your fellow students by attending class and turning in assignments on time. If you must miss a class or turn in an assignment late, please let me know beforehand so that we may work out a way for you to make up the work. You do not need a doctor’s note or other written excuse, but please let me know if there are special circumstances that may prevent you from completing a large amount of coursework.\n\n\n\nGood participation should be understood as consistent and thoughtful contribution to the classroom community, an engagement with course materials and conversations, and a general responsiveness to (and respect for) one’s fellow students and instructor. This isn’t an accounting of how often you speak in class. Instead, it’s about what you offer to the intellectual life of the class, and everyone contributes to this on-going work in different ways. Particularly because so much of the class will consist of hands-on work, you’ll get participation credit simply for attending class and doing the work with care.\nAttending class is not optional: regular attendance is necessary to succeed in this course. Each day will have new content, activities, and learning opportunities. You’ll want to attend as much as possible to avoid falling behind. If you have to miss class for any reason, please let me know in advance, especially if you have to miss more than one class in a row. Missing class is not an excuse for missing assignment deadlines, being unprepared for the next class session, or falling behind on the daily quizzes. You are responsible for keeping up-to-date with the work of the course or for communicating with me about unexpected circumstances which change your ability to do so. You can always reach out to me or a classmate to find out what you missed. We’re all in this together, and I’ll do my best to make sure no one falls behind.\nSome class days on the schedule are marked with a double asterisk (**): this indicates extremely important content without which you cannot be successful in the rest of the course. If you must miss any portion of a class session on dates indicated with a double asterisk, you must schedule a meeting with me to cover what you missed before the next class you attend. In each instance, failure to do so will reduce your final letter grade by one step (e.g., an A becomes an A-, a B- becomes a C+, etc.).\n\n\nIf I have to miss class due to illness or any other reason, I will let you know as soon as possible via email. I’ll also post any relevant materials on Sakai or on this website, and my email will let you know what you need to do. It’s a good idea to check your email at least once a day, since that’s the primary way I’ll keep in touch about any changes to the schedule.\n\n\n\n\nAll assignments are due by the start of each class. I know that things don’t always go according to plan. If you need an extension, simply ask for one (by email), and you’ll almost always receive it. You don’t need an excuse to receive an extension!\nHowever, you must ask for the extension at least 24 hours before the assignment deadline. When you email about an extension, please propose a new deadline for the assignment (a good rule of thumb is 2 or 3 days after the original deadline). Any work received late without an agreed-upon extension will be penalized one point per day.\nBut keep in mind: I cannot accept any assignment more than one week late. This a fast-moving course, and I want to ensure that everyone stays on track. Assignments more than one week late will receive a 0.\n\n\n\nIn this course, as in all courses, you are expected to adhere to W&J’s standards of academic honesty and integrity. You should refer to the College Catalog on MyW&J for the details of this policy and how cases of academic misconduct are handled.\nIn general, when completing writing and coding assignments, ensure all work is your own, and give credit where it is due in your citations. Likewise do not collaborate on quizzes, tests, or homework assignments unless explicitly granted permission. If you have any concerns about whether you might have plagiarized (e.g., if you’re not sure about some particular rule), please get in touch with me immediately—I will gladly discuss the matter with you.\n\n\nThese standards of academic integrity apply to coding as well as other kinds of classwork. Citation isn’t just for papers! It’s very common, and perfectly permissible, to borrow code snippets from a classmate or from somewhere online (except during in-class exams). When you do, make sure to include a note in your code’s comments about where the code came from. Keep in mind that this includes the use of any automated writing or code assistants like ChatGPT—any use of such programs should be cited like any website, with a link to the chat record. Not only will this let you give appropriate intellectual credit and avoid plagiarism, it will also help you remember what you were trying to do when you revise your code later.\nWith regard to ChatGPT, Gemini, GitHub Copilot, or any related generative AI systems, keep in mind that in this class you are only permitted to use these systems to help with your code, never with your writing. If you do use a code assistant to help, you must cite what you used in a comment and include a link to the chat record. And keep in mind that these tools may not give you the best advice! It’s always better to work from our course materials or ask a classmate for help.\n\n\n\n\nEveryone has the right to be addressed as they feel most comfortable. It’s hard to learn if you cringe every time I call on you or address you in communication. I will ask everyone at the beginning of the semester to tell me their preferred name, pronunciation, and the pronouns they use. I will do my very best to get it right. Please do not feel the need to change your name or pronouns to “make it easy” for me, and please correct me if I get it wrong! This policy goes for everyone—use the names and pronouns dictated by the person to whom they belong. Also, our personal growth does not always align with the semester system: If your name or pronoun changes part way through the class, please send me an update!\n\n\n\nPlease be respectful with your use of laptops and technology in class. I request that you only use them for class related purposes, as I and others may find them distracting (For example, no email or social media should be open in your browser tabs!). Cell phones should be kept silent and put away, and you can expect the same from me."
  },
  {
    "objectID": "policies.html#shared-expectations-for-this-class",
    "href": "policies.html#shared-expectations-for-this-class",
    "title": "Course Policies",
    "section": "",
    "text": "We will cover a lot of material during the semester, and you will have many opportunities to discuss complex ideas with your peers. Some of you may be entering the classroom with more advanced prior knowledge of databases and related topics, while others may be encountering these concepts for the first time. Group learning and discussion are key aspects of this course. This means that we all need to do our part to be prepared for each class, and to foster a positive and inquisitive learning environment.\nIn between classes you should:\n\nReview your notes from previous classes\nRead the assigned readings for that day\nRefer to this site for updates to the schedule\nDO NOT wait until the last minute to begin your assignments\nEMAIL your instructor with any questions. Ask lots of questions!\n\nEach class must create its own learning community as the result of shared efforts on the part of all members. It is your responsibility as a member of this learning community to help your fellow students by attending class and turning in assignments on time. If you must miss a class or turn in an assignment late, please let me know beforehand so that we may work out a way for you to make up the work. You do not need a doctor’s note or other written excuse, but please let me know if there are special circumstances that may prevent you from completing a large amount of coursework.\n\n\n\nGood participation should be understood as consistent and thoughtful contribution to the classroom community, an engagement with course materials and conversations, and a general responsiveness to (and respect for) one’s fellow students and instructor. This isn’t an accounting of how often you speak in class. Instead, it’s about what you offer to the intellectual life of the class, and everyone contributes to this on-going work in different ways. Particularly because so much of the class will consist of hands-on work, you’ll get participation credit simply for attending class and doing the work with care.\nAttending class is not optional: regular attendance is necessary to succeed in this course. Each day will have new content, activities, and learning opportunities. You’ll want to attend as much as possible to avoid falling behind. If you have to miss class for any reason, please let me know in advance, especially if you have to miss more than one class in a row. Missing class is not an excuse for missing assignment deadlines, being unprepared for the next class session, or falling behind on the daily quizzes. You are responsible for keeping up-to-date with the work of the course or for communicating with me about unexpected circumstances which change your ability to do so. You can always reach out to me or a classmate to find out what you missed. We’re all in this together, and I’ll do my best to make sure no one falls behind.\nSome class days on the schedule are marked with a double asterisk (**): this indicates extremely important content without which you cannot be successful in the rest of the course. If you must miss any portion of a class session on dates indicated with a double asterisk, you must schedule a meeting with me to cover what you missed before the next class you attend. In each instance, failure to do so will reduce your final letter grade by one step (e.g., an A becomes an A-, a B- becomes a C+, etc.).\n\n\nIf I have to miss class due to illness or any other reason, I will let you know as soon as possible via email. I’ll also post any relevant materials on Sakai or on this website, and my email will let you know what you need to do. It’s a good idea to check your email at least once a day, since that’s the primary way I’ll keep in touch about any changes to the schedule.\n\n\n\n\nAll assignments are due by the start of each class. I know that things don’t always go according to plan. If you need an extension, simply ask for one (by email), and you’ll almost always receive it. You don’t need an excuse to receive an extension!\nHowever, you must ask for the extension at least 24 hours before the assignment deadline. When you email about an extension, please propose a new deadline for the assignment (a good rule of thumb is 2 or 3 days after the original deadline). Any work received late without an agreed-upon extension will be penalized one point per day.\nBut keep in mind: I cannot accept any assignment more than one week late. This a fast-moving course, and I want to ensure that everyone stays on track. Assignments more than one week late will receive a 0.\n\n\n\nIn this course, as in all courses, you are expected to adhere to W&J’s standards of academic honesty and integrity. You should refer to the College Catalog on MyW&J for the details of this policy and how cases of academic misconduct are handled.\nIn general, when completing writing and coding assignments, ensure all work is your own, and give credit where it is due in your citations. Likewise do not collaborate on quizzes, tests, or homework assignments unless explicitly granted permission. If you have any concerns about whether you might have plagiarized (e.g., if you’re not sure about some particular rule), please get in touch with me immediately—I will gladly discuss the matter with you.\n\n\nThese standards of academic integrity apply to coding as well as other kinds of classwork. Citation isn’t just for papers! It’s very common, and perfectly permissible, to borrow code snippets from a classmate or from somewhere online (except during in-class exams). When you do, make sure to include a note in your code’s comments about where the code came from. Keep in mind that this includes the use of any automated writing or code assistants like ChatGPT—any use of such programs should be cited like any website, with a link to the chat record. Not only will this let you give appropriate intellectual credit and avoid plagiarism, it will also help you remember what you were trying to do when you revise your code later.\nWith regard to ChatGPT, Gemini, GitHub Copilot, or any related generative AI systems, keep in mind that in this class you are only permitted to use these systems to help with your code, never with your writing. If you do use a code assistant to help, you must cite what you used in a comment and include a link to the chat record. And keep in mind that these tools may not give you the best advice! It’s always better to work from our course materials or ask a classmate for help.\n\n\n\n\nEveryone has the right to be addressed as they feel most comfortable. It’s hard to learn if you cringe every time I call on you or address you in communication. I will ask everyone at the beginning of the semester to tell me their preferred name, pronunciation, and the pronouns they use. I will do my very best to get it right. Please do not feel the need to change your name or pronouns to “make it easy” for me, and please correct me if I get it wrong! This policy goes for everyone—use the names and pronouns dictated by the person to whom they belong. Also, our personal growth does not always align with the semester system: If your name or pronoun changes part way through the class, please send me an update!\n\n\n\nPlease be respectful with your use of laptops and technology in class. I request that you only use them for class related purposes, as I and others may find them distracting (For example, no email or social media should be open in your browser tabs!). Cell phones should be kept silent and put away, and you can expect the same from me."
  },
  {
    "objectID": "policies.html#important-resources-for-this-class-and-your-college-journey",
    "href": "policies.html#important-resources-for-this-class-and-your-college-journey",
    "title": "Course Policies",
    "section": "Important Resources for this Class and Your College Journey",
    "text": "Important Resources for this Class and Your College Journey\n\nMental Health\nWhat we do in college is not easy, on many fronts. Students are challenged with feelings of depression, anxiety, and self harm at astonishingly high rates. Learning is hard, and you will likely be challenged in college in ways that you haven’t experienced before. Learning while life is hard is even harder. Please take care of yourself. Drink water, eat well, and get more than seven hours of sleep. Have some hobbies, but don’t feel the need to do everything. If you are feeling depressed, withdrawn, anxious, like an impostor, or you are having specific problems with harassment, assault, bias, etc., please seek help. There are many resources on campus, and my door and email are always open.\nPlease also consider contacting the Student Counseling Center (724) 223-6107 or the 24/7/365 Counseling Support Line (833) 434-1217, for support if you’re feeling stressed, overwhelmed, anxious, depressed, lost, or are struggling with personal issues. Services are free and confidential. Students have access to free, confidential counseling, self-help, meditation programs, online therapy and crisis counseling via (833) 434-1217 or by registering with uWill.\n\n\nDisability Support Services\nDisability Support Services Washington & Jefferson College is committed to providing academic accommodations for students with disabilities. Accommodations are available for students with physical disabilities, learning disabilities, and mental health diagnoses that meet the definition of a disability under the Americans with Disabilities Act. Students who believe they may qualify for academic accommodations should contact the Director for Academic Success on the Clark Family Library Ground Floor at (724) 223-6008 or dss@washjeff.edu. For students who are already registered with Disability Support Services, please share your letters of accommodation with your professors as soon as possible. Your letter serves as an opportunity for professors and students to work together and ensure that your accommodations are successfully delivered throughout the term.\n\n\nW&J Library\nI highly recommend that you make use of the W&J Library resources while navigating your essays this semester. That includes not only primary literature, access to databases, and book references, but also the friendly members of the library staff. They are excellent resources for finding information efficiently, or learning what you can access through W&J subscriptions that might not be freely available on the internet. The W&J Library homepage is https://libguides.washjeff.edu/home.\n\n\nWriting Center\nStaffed by student Peer Writing Tutors, the Writing Center is a free resource available to all W&J students. Writing Tutors from many majors help writers one-on-one in all phases of the writing process, from deciphering assignments, to discussing ideas, to developing an argument, to finalizing a draft. Because proofreading is a last step in that process, you should leave plenty of time (like at least a week) for getting your ideas right before expecting proofreading help. Consultants also can help writers with personal documents, like job and internship applications. The Center welcomes student writers with all varieties of backgrounds and college preparation, including multilingual writers. Please visit the Writing Center’s page (https://mywj.washjeff.edu/office/writing-center) on MyW&J for specific information regarding hours of availability and how to schedule an appointment.\n\n\nCautions regarding copyright and licensing\nAll documents provided to you (i.e. syllabus, paper prompts, tests, etc…) are the property of the instructor or author. It is a violation of intellectual property to post these online (especially to websites promoting copying/cheating) or to provide them to students not in our class or in future classes. Your papers are your property, and while you can do with them as you wish, it may be a violation of academic integrity to make them available to others who might use them for plagiarism. Basically, keep course materials and your work to yourself except in the process of editing and peer review.\n\n\nInclusion and Diversity\nThis course is open to anyone interested in databases and related technologies. It is my intent to make all students feel welcome and served in this course by addressing their learning needs. We all (including myself) are continuously learning about different lived experiences. In this course, if you encounter anything said (intentionally or unintentionally) that made you feel uncomfortable, please talk to me about it. If your learning is impacted by your background, or any life event going on outside of class, feel free to talk to me. Even if you choose not to share details, I would be happy to direct you to the right resources on campus.\nI acknowledge that each of you has their own specific life history, family context, identity, body—and that these realities have an impact on how you understand and interact with our course materials. Therefore, I ask you to generally familiarize yourself with the content of our discussions ahead of time, and if for any reason you believe you will be unable to participate in a discussion of certain themes or elements, please contact me beforehand and/or seek the support of any of the formal or informal resources available to you on campus, some of which are included in this syllabus. I look forward to creating a safe learning environment together this semester!"
  },
  {
    "objectID": "policies.html#grading-scale",
    "href": "policies.html#grading-scale",
    "title": "Course Policies",
    "section": "Grading Scale",
    "text": "Grading Scale\n\n\n\nLetter Grade\nPoint Total\n\n\n\n\nA\n93-100\n\n\nA-\n90-92\n\n\nB+\n87-89\n\n\nB\n83-86\n\n\nB-\n80-82\n\n\nC+\n77-79\n\n\nC\n73-76\n\n\nC-\n70-72\n\n\nD+\n67-69\n\n\nD\n63-66\n\n\nD-\n60-62\n\n\nF\n&lt;60"
  },
  {
    "objectID": "slides/databasics.html#what-is-data",
    "href": "slides/databasics.html#what-is-data",
    "title": "Database Basics: Databasics",
    "section": "What is Data?",
    "text": "What is Data?\n\nIndividual observations made in a specific context."
  },
  {
    "objectID": "slides/databasics.html#data-is-something-that-people-make.",
    "href": "slides/databasics.html#data-is-something-that-people-make.",
    "title": "Database Basics: Databasics",
    "section": "Data is something that people make.",
    "text": "Data is something that people make."
  },
  {
    "objectID": "slides/databasics.html#what-is-information",
    "href": "slides/databasics.html#what-is-information",
    "title": "Database Basics: Databasics",
    "section": "What is Information?",
    "text": "What is Information?\n\nIn our context, information is generated by analyzing data."
  },
  {
    "objectID": "slides/databasics.html#a-shared-and-stored-collection-of-related-data.",
    "href": "slides/databasics.html#a-shared-and-stored-collection-of-related-data.",
    "title": "Database Basics: Databasics",
    "section": "A shared and stored collection of related data.",
    "text": "A shared and stored collection of related data.\nHow else might you store data?"
  },
  {
    "objectID": "slides/databasics.html#what-are-databases-for",
    "href": "slides/databasics.html#what-are-databases-for",
    "title": "Database Basics: Databasics",
    "section": "What are databases for ?",
    "text": "What are databases for ?"
  },
  {
    "objectID": "slides/databasics.html#the-4-characteristics-of-databases",
    "href": "slides/databasics.html#the-4-characteristics-of-databases",
    "title": "Database Basics: Databasics",
    "section": "The 4 Characteristics of Databases",
    "text": "The 4 Characteristics of Databases\n\nA database represents data (not information).\nA database is built for a purpose.\nA database is logical and internally consistent.\nA database is queryable."
  },
  {
    "objectID": "slides/databasics.html#edgar-codd",
    "href": "slides/databasics.html#edgar-codd",
    "title": "Database Basics: Databasics",
    "section": "Edgar Codd",
    "text": "Edgar Codd\n\n“A Relational Model of Data for Large Shared Data Banks,” IBM Research Lab, 1970"
  },
  {
    "objectID": "slides/databasics.html#preserving-the-connections-between-data-independently-and-consistently",
    "href": "slides/databasics.html#preserving-the-connections-between-data-independently-and-consistently",
    "title": "Database Basics: Databasics",
    "section": "Preserving the connections between data independently and consistently",
    "text": "Preserving the connections between data independently and consistently\nRelational databases don’t depend on the way users will interface with the data, and all of the data can be easily referenced."
  },
  {
    "objectID": "slides/databasics.html#an-example-relational-table",
    "href": "slides/databasics.html#an-example-relational-table",
    "title": "Database Basics: Databasics",
    "section": "An example relational table",
    "text": "An example relational table"
  },
  {
    "objectID": "slides/databasics.html#criteria-for-relational-tables",
    "href": "slides/databasics.html#criteria-for-relational-tables",
    "title": "Database Basics: Databasics",
    "section": "Criteria for Relational Tables",
    "text": "Criteria for Relational Tables\n\nRows contain data about an entity.\nColumns contain data about an entity’s attributes.\nFields contain a non-empty atomic data value.\nAttributes conform to a specific format.\nEach column has a unique name.\nThe order of rows and columns may not affect the relation.\nEach record must be unique, such that a set of attributes identify each entity."
  },
  {
    "objectID": "slides/databasics.html#is-this-a-relational-table",
    "href": "slides/databasics.html#is-this-a-relational-table",
    "title": "Database Basics: Databasics",
    "section": "Is this a relational table?",
    "text": "Is this a relational table?"
  },
  {
    "objectID": "slides/databasics.html#how-do-tables-relate-to-one-another",
    "href": "slides/databasics.html#how-do-tables-relate-to-one-another",
    "title": "Database Basics: Databasics",
    "section": "How do tables relate to one another?",
    "text": "How do tables relate to one another?\n“A functional dependency is a relationship between two sets of attributes in a database, where one set (the determinant) determines the values of the other set (the dependent).”\nmonday.com"
  },
  {
    "objectID": "slides/databasics.html#types-of-functional-dependencies",
    "href": "slides/databasics.html#types-of-functional-dependencies",
    "title": "Database Basics: Databasics",
    "section": "Types of functional dependencies",
    "text": "Types of functional dependencies\n\nfull functional dependency: one and only one value of the determinant attribute determines one and only one value of the dependent attribute\npartial functional dependency: a dependency that exists between a subset of the (composite) primary key and one or more dependent attributes\ntransitive functional dependency: a dependency that exists between two or more non-key attributes"
  },
  {
    "objectID": "slides/databasics.html#dependencies-can-help-identify-and-reduce-data-redundancy.",
    "href": "slides/databasics.html#dependencies-can-help-identify-and-reduce-data-redundancy.",
    "title": "Database Basics: Databasics",
    "section": "Dependencies can help identify and reduce data redundancy.",
    "text": "Dependencies can help identify and reduce data redundancy."
  },
  {
    "objectID": "slides/databasics.html#dependencies-are-defined-by-keys.",
    "href": "slides/databasics.html#dependencies-are-defined-by-keys.",
    "title": "Database Basics: Databasics",
    "section": "Dependencies are defined by keys.",
    "text": "Dependencies are defined by keys.\n\nCandidate Key: any attribute or set of attributes which uniquely identify each entity\nPrimary Key: the developer-chosen candidate key.\nSecondary Key: any non-primary candidate key; typically used as an index.\nForeign Key: a primary key from an external relation.\nComposite Key: any key comprised of more than one attribute."
  },
  {
    "objectID": "slides/databasics.html#dependency-diagrams",
    "href": "slides/databasics.html#dependency-diagrams",
    "title": "Database Basics: Databasics",
    "section": "Dependency Diagrams",
    "text": "Dependency Diagrams"
  },
  {
    "objectID": "slides/databasics.html#how-to-draw-a-dependency-diagram",
    "href": "slides/databasics.html#how-to-draw-a-dependency-diagram",
    "title": "Database Basics: Databasics",
    "section": "How to Draw a Dependency Diagram",
    "text": "How to Draw a Dependency Diagram\n\nIdentify the primary key (or composite key).\nDraw arrows from the primary key(s) to all other attributes.\nIf there is a composite key, look for partial dependencies between part of the key and any other attributes.\nLook for transitive dependencies between any non-key attributes."
  },
  {
    "objectID": "slides/databasics.html#you-can-turn-the-diagram-into-notation-of-the-functional-dependencies.",
    "href": "slides/databasics.html#you-can-turn-the-diagram-into-notation-of-the-functional-dependencies.",
    "title": "Database Basics: Databasics",
    "section": "You can turn the diagram into notation of the functional dependencies.",
    "text": "You can turn the diagram into notation of the functional dependencies.\n(Building, Number) → (nBed, nBath)\n(Building) → (StreetAddress)\nThis follows the form:\nDeterminants → Dependents"
  },
  {
    "objectID": "slides/databasics.html#these-functional-dependencies-will-become-two-tables.",
    "href": "slides/databasics.html#these-functional-dependencies-will-become-two-tables.",
    "title": "Database Basics: Databasics",
    "section": "These functional dependencies will become two tables.",
    "text": "These functional dependencies will become two tables.\nBUILDING(Building, StreetAddress)\nAPARTMENT(Building, Number, nBed, nBath)\nThis is a schema, and it follows the form:\nTABLE(PrimaryKey, ForeignKey, Attribute)"
  },
  {
    "objectID": "slides/databasics.html#list-all-of-the-functional-dependencies.",
    "href": "slides/databasics.html#list-all-of-the-functional-dependencies.",
    "title": "Database Basics: Databasics",
    "section": "List all of the functional dependencies.",
    "text": "List all of the functional dependencies.\n\n\n\nDate\nItem\nPrice\nQuantity\n\n\n\n\n8-11-2023\nApple\n$3.99\n2\n\n\n8-14-2023\nCokeZero\n$4.99\n3\n\n\n8-14-2023\nApple\n$3.99\n5\n\n\n\nWhich column or set of columns might form the primary key of this table?"
  },
  {
    "objectID": "slides/databasics.html#normalization-organizes-data-based-on-functional-dependencies-in-order-to-remove-potential-redundancies.",
    "href": "slides/databasics.html#normalization-organizes-data-based-on-functional-dependencies-in-order-to-remove-potential-redundancies.",
    "title": "Database Basics: Databasics",
    "section": "Normalization organizes data based on functional dependencies in order to remove potential redundancies.",
    "text": "Normalization organizes data based on functional dependencies in order to remove potential redundancies."
  },
  {
    "objectID": "slides/databasics.html#three-stages-of-normalization",
    "href": "slides/databasics.html#three-stages-of-normalization",
    "title": "Database Basics: Databasics",
    "section": "Three Stages of Normalization",
    "text": "Three Stages of Normalization\n\nFirst Normal Form (1NF): follows all criteria of Codd’s Relational Model, with primary key identified\nSecond Normal Form (2NF): all partial dependencies removed\nThird Normal Form (3NF): all transitive dependencies removed\nThere are more that typically aren’t used!"
  },
  {
    "objectID": "slides/databasics.html#making-a-dependency-diagram-prepares-you-to-normalize",
    "href": "slides/databasics.html#making-a-dependency-diagram-prepares-you-to-normalize",
    "title": "Database Basics: Databasics",
    "section": "Making a dependency diagram prepares you to normalize!",
    "text": "Making a dependency diagram prepares you to normalize!"
  },
  {
    "objectID": "slides/databasics.html#you-dont-always-want-to-fully-normalize-your-data.",
    "href": "slides/databasics.html#you-dont-always-want-to-fully-normalize-your-data.",
    "title": "Database Basics: Databasics",
    "section": "You don’t always want to fully normalize your data.",
    "text": "You don’t always want to fully normalize your data.\nSome data (like dates) are better kept together for ease of use and performance reasons, even if that means the database doesn’t follow every normal form. Returning the database to this state is called denormalization."
  },
  {
    "objectID": "slides/databasics.html#follow-these-steps",
    "href": "slides/databasics.html#follow-these-steps",
    "title": "Database Basics: Databasics",
    "section": "Follow these steps:",
    "text": "Follow these steps:\n\nRewrite the table so it’s in 1NF (i.e. so it follows Codd’s relational model).\nDraw the dependency diagram and identify the primary key(s).\nIf necessary, redraw the dependency diagram so it’s in 2NF. Create the accompanying schema.\nIf necessary, redraw the dependency diagram so it’s in 3NF. Create the accompanying schema."
  },
  {
    "objectID": "slides/databasics.html#some-more-practice-examples.",
    "href": "slides/databasics.html#some-more-practice-examples.",
    "title": "Database Basics: Databasics",
    "section": "Some more practice examples.",
    "text": "Some more practice examples."
  },
  {
    "objectID": "slides/databasics.html#data-integrity-refers-to-the-accuracy-and-consistency-validity-of-data-over-its-life-cycle.",
    "href": "slides/databasics.html#data-integrity-refers-to-the-accuracy-and-consistency-validity-of-data-over-its-life-cycle.",
    "title": "Database Basics: Databasics",
    "section": "Data integrity “refers to the accuracy and consistency (validity) of data over its life cycle.”",
    "text": "Data integrity “refers to the accuracy and consistency (validity) of data over its life cycle.”\ncf. Digital Guardian article"
  },
  {
    "objectID": "slides/databasics.html#alcoa-data-should-be-attributable-legible-contemporaneous-original-and-accurate.",
    "href": "slides/databasics.html#alcoa-data-should-be-attributable-legible-contemporaneous-original-and-accurate.",
    "title": "Database Basics: Databasics",
    "section": "ALCOA: Data should be attributable, legible, contemporaneous, original, and accurate.",
    "text": "ALCOA: Data should be attributable, legible, contemporaneous, original, and accurate."
  },
  {
    "objectID": "slides/databasics.html#types-of-data-integrity",
    "href": "slides/databasics.html#types-of-data-integrity",
    "title": "Database Basics: Databasics",
    "section": "Types of Data Integrity",
    "text": "Types of Data Integrity\n\nEntity integrity: primary keys represent one and only one entity\nReferential integrity: foreign keys define connections between tables\nDomain integrity: values in a database follow a set format\nUser-defined integrity: users can define new data and its constraints"
  },
  {
    "objectID": "slides/databasics.html#entity-relationship-diagrams-erds-document-the-database-schema-to-show",
    "href": "slides/databasics.html#entity-relationship-diagrams-erds-document-the-database-schema-to-show",
    "title": "Database Basics: Databasics",
    "section": "Entity relationship diagrams (ERDs) document the database schema to show:",
    "text": "Entity relationship diagrams (ERDs) document the database schema to show:\n\ntables and their connections\nattributes (i.e. columns)\ndata types\nconstraints"
  },
  {
    "objectID": "slides/databasics.html#three-types-of-erds",
    "href": "slides/databasics.html#three-types-of-erds",
    "title": "Database Basics: Databasics",
    "section": "Three Types of ERDs",
    "text": "Three Types of ERDs\n\nConceptual: documents the entities and the cardinality of their relations.\nLogical: documents the attributes that establish the formal connections.\nPhysical: documents the way the schema is stored, including data types and constraints."
  },
  {
    "objectID": "slides/databasics.html#databases-store-data-in-binary",
    "href": "slides/databasics.html#databases-store-data-in-binary",
    "title": "Database Basics: Databasics",
    "section": "Databases store data in binary!",
    "text": "Databases store data in binary!\nA bit (binary digit) stores a one or a zero. Data is stored in bytes, a series of 8 bits."
  },
  {
    "objectID": "slides/databasics.html#an-example-of-a-number-stored-in-8-bits-1-byte",
    "href": "slides/databasics.html#an-example-of-a-number-stored-in-8-bits-1-byte",
    "title": "Database Basics: Databasics",
    "section": "An example of a number stored in 8 bits (1 byte):",
    "text": "An example of a number stored in 8 bits (1 byte):"
  },
  {
    "objectID": "slides/databasics.html#common-data-types",
    "href": "slides/databasics.html#common-data-types",
    "title": "Database Basics: Databasics",
    "section": "Common Data Types",
    "text": "Common Data Types\n\nCHAR: a single character, e.g. a letter, number, or symbol (1 byte)\nTEXT: a sequence of characters that forms a string (1 byte per character)\nINTEGER: a whole number, either positive or negative (typically 4 bytes)\nFLOAT(P): a numeric value that can have a decimal point. Supports the provided “floating point” precision (P, or the number of significant digits to be stored). (at least 4 bytes)\nBOOLEAN: a binary choice, e.g. True or False (1 byte)"
  },
  {
    "objectID": "slides/databasics.html#null-values-are-not-stored-in-bytes",
    "href": "slides/databasics.html#null-values-are-not-stored-in-bytes",
    "title": "Database Basics: Databasics",
    "section": "NULL values are not stored in bytes!",
    "text": "NULL values are not stored in bytes!\nMinimize NULL values to use your storage wisely."
  },
  {
    "objectID": "slides/databasics.html#a-simple-example",
    "href": "slides/databasics.html#a-simple-example",
    "title": "Database Basics: Databasics",
    "section": "A simple example",
    "text": "A simple example\n\n\n\ndate\nitem\nprice\nquantity\n\n\n\n\n8-11-2023\nApple\n$3.99\n2\n\n\n8-14-2023\nCokeZero\n$4.99\n3\n\n\n8-14-2023\nApple\n$3.99\n5"
  },
  {
    "objectID": "slides/databasics.html#every-table-is-a-box-with-the-table-name-all-its-attributes-and-data-types-and-pks-and-fks-identified.",
    "href": "slides/databasics.html#every-table-is-a-box-with-the-table-name-all-its-attributes-and-data-types-and-pks-and-fks-identified.",
    "title": "Database Basics: Databasics",
    "section": "Every table is a box with the table name, all its attributes and data types, and PKs and FKs identified.",
    "text": "Every table is a box with the table name, all its attributes and data types, and PKs and FKs identified."
  },
  {
    "objectID": "slides/databasics.html#the-box-should-also-include-possible-constraints.",
    "href": "slides/databasics.html#the-box-should-also-include-possible-constraints.",
    "title": "Database Basics: Databasics",
    "section": "The box should also include possible constraints.",
    "text": "The box should also include possible constraints.\n\nNOT NULL: the attribute is not permitted to contain a null value\nUNIQUE: the stored value may not match any other entity’s value for that attribute.\nPRIMARY KEY (enforces NOT NULL and UNIQUE)\nFOREIGN KEY (enforces NOT NULL)"
  },
  {
    "objectID": "slides/databasics.html#lines-between-boxes-show-relationships.",
    "href": "slides/databasics.html#lines-between-boxes-show-relationships.",
    "title": "Database Basics: Databasics",
    "section": "Lines between boxes show relationships.",
    "text": "Lines between boxes show relationships.\nRelationships can be strong or weak. Weak relationships are existence-dependent."
  },
  {
    "objectID": "slides/databasics.html#cardinalityconnectivity-shows-the-kind-of-relationship.",
    "href": "slides/databasics.html#cardinalityconnectivity-shows-the-kind-of-relationship.",
    "title": "Database Basics: Databasics",
    "section": "Cardinality/connectivity shows the kind of relationship.",
    "text": "Cardinality/connectivity shows the kind of relationship."
  },
  {
    "objectID": "slides/databasics.html#make-sure-to-consider-flow-and-readability.",
    "href": "slides/databasics.html#make-sure-to-consider-flow-and-readability.",
    "title": "Database Basics: Databasics",
    "section": "Make sure to consider flow and readability.",
    "text": "Make sure to consider flow and readability.\n\nConsider the order of your tables left to right.\nLines shouldn’t criss-cross.\nEnds of lines should point at the correct PKs/FKs."
  }
]